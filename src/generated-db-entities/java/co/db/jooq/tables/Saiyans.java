/*
 * This file is generated by jOOQ.
 */
package co.db.jooq.tables;


import co.db.jooq.DefaultSchema;
import co.db.jooq.Keys;
import co.db.jooq.tables.records.SaiyansRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Saiyans extends TableImpl<SaiyansRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>saiyans</code>
     */
    public static final Saiyans SAIYANS = new Saiyans();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SaiyansRecord> getRecordType() {
        return SaiyansRecord.class;
    }

    /**
     * The column <code>saiyans.saiyan_id</code>.
     */
    public final TableField<SaiyansRecord, Integer> SAIYAN_ID = createField(DSL.name("saiyan_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>saiyans.saiyan_name</code>.
     */
    public final TableField<SaiyansRecord, String> SAIYAN_NAME = createField(DSL.name("saiyan_name"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>saiyans.saiyan_gender</code>.
     */
    public final TableField<SaiyansRecord, String> SAIYAN_GENDER = createField(DSL.name("saiyan_gender"), SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>saiyans.saiyan_blood</code>.
     */
    public final TableField<SaiyansRecord, String> SAIYAN_BLOOD = createField(DSL.name("saiyan_blood"), SQLDataType.VARCHAR(20), this, "");

    private Saiyans(Name alias, Table<SaiyansRecord> aliased) {
        this(alias, aliased, null);
    }

    private Saiyans(Name alias, Table<SaiyansRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>saiyans</code> table reference
     */
    public Saiyans(String alias) {
        this(DSL.name(alias), SAIYANS);
    }

    /**
     * Create an aliased <code>saiyans</code> table reference
     */
    public Saiyans(Name alias) {
        this(alias, SAIYANS);
    }

    /**
     * Create a <code>saiyans</code> table reference
     */
    public Saiyans() {
        this(DSL.name("saiyans"), null);
    }

    public <O extends Record> Saiyans(Table<O> child, ForeignKey<O, SaiyansRecord> key) {
        super(child, key, SAIYANS);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<SaiyansRecord> getPrimaryKey() {
        return Keys.KEY_SAIYANS_PRIMARY;
    }

    @Override
    public List<UniqueKey<SaiyansRecord>> getKeys() {
        return Arrays.<UniqueKey<SaiyansRecord>>asList(Keys.KEY_SAIYANS_PRIMARY, Keys.KEY_SAIYANS_SAIYAN_ID);
    }

    @Override
    public Saiyans as(String alias) {
        return new Saiyans(DSL.name(alias), this);
    }

    @Override
    public Saiyans as(Name alias) {
        return new Saiyans(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Saiyans rename(String name) {
        return new Saiyans(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Saiyans rename(Name name) {
        return new Saiyans(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
